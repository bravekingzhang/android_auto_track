buildscript {
    repositories {
        maven {
            url "http://maven.oa.com/nexus/content/groups/androidbuild"
        }
        maven {
            url uri('../snapshotRepo')
        }
    }
    dependencies {
        classpath 'com.tencent.tip:autotrack-gradle-plugin:1.0.3-SNAPSHOT'
    }
}

apply plugin: 'com.tencent.tip.autotrack'


import com.xixi.plugin.asm.AutoMethodVisitor
import org.objectweb.asm.AnnotationVisitor
import org.objectweb.asm.MethodVisitor


auto_tract {

    // 是否打印日志,可选,默认false
    isDebug = true
    // 是否打开SDK的日志全埋点采集,可选,默认true
    isOpenLogTrack = true
    // 因为默认系统包[android.support, androidx]是被过滤掉的,想对默认过滤掉的类插桩的话可以手动添加包名,但是不建议对系统类进行插桩,容易出现不可预期错误,可选,默认空
    include = ["android.support.v7.widget"]
    // [android.support, androidx]默认过滤，可手动追加过滤的包,可选,默认空不追加
    exclude = []
    // 自动埋点文件配置
    log_analytics_base = ''
    // 支持自定义配置,可选,默认空
    matchData = [[
                         //是否使用注解来找对应方法
                         'isAnnotation'  : true,
                         //方法的匹配，可以通过类名或者实现的接口名匹配
                         'ClassFilter'  : [
                                 ['ClassName' : '', 'InterfaceName': '',
                                  'MethodName': '', 'MethodDes': '']
                         ],
                         //插入的字节码，方法的执行顺序visitAnnotation->onMethodEnter->onMethodExit
                         'MethodVisitor': {
                             MethodVisitor methodVisitor, int access, String name, String desc ->
                                 MethodVisitor adapter = new AutoMethodVisitor(methodVisitor, access, name, desc) {
                                     boolean isAnnotation = false

                                     @Override
                                     protected void onMethodEnter() {
                                         super.onMethodEnter()
                                         //使用注解找对应方法的时候得加这个判断
                                         if (!isAnnotation) {
                                             return
                                         }
                                         methodVisitor.visitLdcInsn('AutoCount')
                                         methodVisitor.visitLdcInsn(name)
                                         methodVisitor.visitMethodInsn(INVOKESTATIC, "com/mmc/lamandys/liba_datapick/asm/Log", "notifyInsert", "(Ljava/lang/String;Ljava/lang/String;)V", false)
                                         methodVisitor.visitLdcInsn(name)
                                         methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/System", "currentTimeMillis", "()J", false)
                                         methodVisitor.visitMethodInsn(INVOKESTATIC, "com/brzhang/autotrackhelper/utils/TimeCache", "setStartTime", "(Ljava/lang/String;J)V", false)
                                     }

                                     @Override
                                     protected void onMethodExit(int opcode) {
                                         super.onMethodExit(opcode)
                                         //使用注解找对应方法的时候得加这个判断
                                         if (!isAnnotation) {
                                             return
                                         }

                                         methodVisitor.visitLdcInsn(name)
                                         methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/System", "currentTimeMillis", "()J", false)
                                         methodVisitor.visitMethodInsn(INVOKESTATIC, "com/brzhang/autotrackhelper/utils/TimeCache", "setEndTime", "(Ljava/lang/String;J)V", false)
                                         methodVisitor.visitLdcInsn("耗时")
                                         methodVisitor.visitLdcInsn('AutoCount')
                                         methodVisitor.visitLdcInsn(name)
                                         methodVisitor.visitMethodInsn(INVOKESTATIC, "com/brzhang/autotrackhelper/utils/TimeCache", "getCostTime", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", false)
                                         methodVisitor.visitMethodInsn(INVOKESTATIC, "android/util/Log", "d", "(Ljava/lang/String;Ljava/lang/String;)I", false)
                                     }

                                     /**
                                      * 需要通过注解的方式加字节码才会重写这个方法来进行条件过滤
                                      */
                                     @Override
                                     AnnotationVisitor visitAnnotation(String des, boolean visible) {
                                         if (des.equals("Lcom/mmc/lamandys/liba_datapick/annotation/AutoCount;")) {
                                             println "注解匹配：" + des
                                             isAnnotation = true
                                         }
                                         return super.visitAnnotation(des, visible)
                                     }
                                 }
                                 return adapter
                         }
                 ],
                 [
                         //方法的匹配，可以通过类名或者实现的接口名匹配
                         'ClassName'    : 'android.support.v7.widget.RecyclerView',
                         'InterfaceName': 'com.mmc.lamandys.liba_datapick.Counter3',
                         'MethodName'   : 'clearOnChildAttachStateChangeListeners',
                         'MethodDes'    : '()V',
                         'isAnnotation' : false,
                         //插入的字节码，方法的执行顺序visitAnnotation->onMethodEnter->onMethodExit
                         'MethodVisitor': {
                             MethodVisitor methodVisitor, int access, String name, String desc ->
                                 MethodVisitor adapter = new AutoMethodVisitor(methodVisitor, access, name, desc) {

                                     @Override
                                     protected void onMethodEnter() {
                                         super.onMethodEnter()
                                     }

                                     @Override
                                     protected void onMethodExit(int opcode) {
                                         super.onMethodExit(opcode)
                                         // INVOKESTATIC
                                         methodVisitor.visitMethodInsn(INVOKESTATIC, "com/mmc/lamandys/liba_datapick/AutoHelper", "onClick", "()V", false)
                                     }
                                 }
                                 return adapter
                         }
                 ]
    ]
}
